import "dotenv/config";
import * as ynab from "ynab";
import config from "./config.json" assert { type: "json" };
import { savedTransactions } from "./amazon.js";

const ynabAPI = new ynab.API(process.env.YNAB_TOKEN);

function makeMemo(itemName) {
  const AUTOGENERATED = " ###YACE";

  return `${itemName.substring(
    0,
    Math.min(itemName.length, 200 - AUTOGENERATED.length)
  )}${AUTOGENERATED}`;
}

async function getUnimportedAmazonTransactions() {
  try {
    const { data: txData } =
      await ynabAPI.transactions.getTransactionsByAccount(
        config.budgetId,
        config.amazonPaymentAccount
      );

    const amazonTransactions = txData.transactions;

    return amazonTransactions;
  } catch (err) {
    console.error(err);
  }

  // const transactionIdHasSubtransactions = amazonTransactions.reduce(
  //   (acc, tx) => {
  //     if (tx.parent_transaction_id) {
  //       acc[tx.parent_transaction_id] = true;
  //     }
  //     return acc;
  //   },
  //   {}
  // );

  // const unprocessedTransactions = txData.transactions.filter(
  //   (tx) =>
  //     !tx.parent_transaction_id &&
  //     !tx.memo &&
  //     !transactionIdHasSubtransactions[amazonTransactions]
  // );

  // return unprocessedTransactions;
}

async function getDefaultBudgetId() {
  const { data: budgetsData } = await ynabAPI.budgets.getBudgets();
  if (!budgetsData) return;

  return (
    budgetsData.default_budget ||
    budgetsData.budgets.sort(
      (a, b) => new Date(b.last_modified_on) - new Date(a.last_modified_on)
    )[0]
  ).id;
}

async function createTransaction(transaction) {
  const { data: budgetsData } = await ynabAPI.budgets.getBudgets();
  if (!budgetsData) return;

  const defaultBudget =
    budgetsData.default_budget ||
    budgetsData.budgets.sort(
      (a, b) => new Date(b.last_modified_on) - new Date(a.last_modified_on)
    )[0];

  const { data: accountsData } = await ynabAPI.accounts.getAccounts(
    defaultBudget.id
  );

  let res;
  try {
    res = await ynabAPI.transactions.createTransaction(defaultBudget.id, {
      transaction,
    });
  } catch (error) {
    res = error;
  }
}

function getMatchingAmazonTransaction(transaction) {
  const amazonTransactions = Object.values(savedTransactions.read());

  //   Amount matches as is within 4 days of transaction
  const possibleMatches = amazonTransactions
    .filter(
      (tx) =>
        Math.floor(parseFloat(tx.amount.replace("$", "")) * 1000) ===
          transaction.amount &&
        Math.abs(new Date(tx.transactionDate) - new Date(transaction.date)) <
          1000 * 60 * 60 * 24 * 4
    )
    .sort(
      (a, b) =>
        Math.abs(new Date(a.transactionDate) - new Date(transaction.date)) -
        Math.abs(new Date(b.transactionDate) - new Date(transaction.date))
    );

  if (possibleMatches.length > 1) {
    throw new Error("More than one possible match found");
  } else {
    return possibleMatches[0];
  }
}

async function addTransactionInformation(ynabTx, amznTx) {
  let transactionUpdates = {
    ...ynabTx,
  };

  if (!amznTx.items) {
    console.error("Transaction has no items");
    return;
  }

  // Add details from single-item orders to the original YNAB transaction memo
  if (amznTx.items.length === 1) {
    transactionUpdates.memo = makeMemo(amznTx.items[0].itemName);
  } else {
    const subtotal =
      amznTx.items.reduce(
        (sum, item) => item.itemCost * (item.itemQty || 1) + sum,
        0
      ) * 1000;

    // Validate sum of prices is within 15% of total amount to allow for tax
    if (ynabTx.amount * 0.85 > subtotal) {
      throw new Error("Subtotal seems too low, validate transaction");
    }

    const tax = -1 * ynabTx.amount - subtotal;
    let amountRemaining = ynab.amount;

    if (transactionUpdates.subtransactions.length === amznTx.items.length) {
      const updatedSubtransactions = [];
      amznTx.items.forEach((item) => {
        const matchingSubtransaction = transactionUpdates.subtransactions.find(
          (subTx) => subTx.memo.includes(item.itemName.substring(0, 100))
        );

        if (!matchingSubtransaction) {
          throw new Error(
            `No matching subtransaction found for ${item.itemName}`
          );
        }

        updatedSubtransactions.push({
          ...matchingSubtransaction,
          memo: makeMemo(item.itemName),
          payee_id: ynabTx.payee_id,
          amount: Math.round(matchingSubtransaction.amount / 10) * 10,
        });
      });
    } else {
      // TODO: Support different methods for dealing with tax
      transactionUpdates.subtransactions = amznTx.items.map((item, idx) => {
        const milliCost = item.itemCost * (item.itemQty || 1) * 1000;

        let txAmount;
        if (idx < amznTx.items.length) {
          txAmount =
            Math.round((milliCost + (milliCost / subtotal) * tax) / 10) * -10;
          amountRemaining -= txAmount;
        } else {
          txAmount = amountRemaining;
        }

        return {
          payee_id: ynabTx.payee_id,
          amount: txAmount,
          memo: makeMemo(item.itemName),
        };
      });
    }

    // Amount sum adjustment
    const amountDiff =
      transactionUpdates.subtransactions.reduce(
        (sum, subTx) => subTx.amount + sum,
        0
      ) - transactionUpdates.amount;

    transactionUpdates.subtransactions[0].amount -= amountDiff;
  }

  return transactionUpdates;
}

async function main() {
  const transaction = {
    //   account_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    date: "2023-10-25",
    //   amount: 0,
    //   payee_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    //   payee_name: "string",
    //   category_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    //   memo: "string",
    //   cleared: "cleared",
    //   approved: true,
    //   flag_color: "red",
    //   import_id: "string",
    //   subtransactions: [
    //     {
    //       amount: 0,
    //       payee_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    //       payee_name: "string",
    //       category_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6",
    //       memo: "string",
    //     },
    //   ],
  };

  const unimported = await getUnimportedAmazonTransactions();

  const txUpdates = [];

  for (let ynabTx of unimported) {
    const amznTx = await getMatchingAmazonTransaction(ynabTx);
    if (amznTx) {
      const updatedTx = await addTransactionInformation(ynabTx, amznTx);
      updatedTx && txUpdates.push(updatedTx);
    }
  }

  let updateTransactionsRes;
  try {
    updateTransactionsRes = await ynabAPI.transactions.updateTransactions(
      config.budgetId,
      { transactions: txUpdates }
    );
  } catch (error) {
    updateTransactionsRes = error;
  }

  console.log(
    updateTransactionsRes?.data?.transactions || updateTransactionsRes
  );
}

main();
